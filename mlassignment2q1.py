# -*- coding: utf-8 -*-
"""MLAssignment2Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BhyG3e9ilygKMZjbc8pOUxYEPg9NuWE2

**1a**
"""

from sklearn.linear_model import LinearRegression
import numpy as np

class Regression(object):
    """docstring for Regression."""
    def __init__(self):
        super(Regression, self).__init__()
        #self.arg = arg
        # self.coef=np.zeros(8)
        # self.intercept=0
        self.coef=None
        self.intercept=None

    """You can give any required inputs to the fit()"""
    def fit(self,X_train,y_train):
        lr = LinearRegression()
        lr.fit(X_train, y_train)
        #lr.score(X, y)
        self.coef=lr.coef_
        self.intercept=lr.intercept_
        #print(self.intercept,self.coef)
        #return coef,intercept


    """Here you can use the fit() from the LinearRegression of sklearn"""


    """ You can add as many methods according to your requirements, but training must be using fit(), and testing must be with predict()"""


    def predict(self,X_test):
        #y_predicted=list()
        y_predicted=np.zeros(len(X_test))
        theta0=self.intercept
        theta=self.coef
        #print(theta0,theta)
        y_pred = np.zeros(len(X_test))
        y_predicted=list()
        for i in range(len(X_test)):
            for j in range(8):
                y_pred[i] += theta[j]*X_test[i][j]
            y_predicted.append(y_pred[i]+theta0)

        """ Write it from scratch usig oitcomes of fit()"""

        """Fill your code here. predict() should only take X_test and return predictions."""


        return y_predicted

# f=open("/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.data","r")
# if f.mode == 'r':
#   contents =f.read()
  #print(contents)

"""**PART b**"""

def q2b():

  import pandas as pd
  import numpy as np
  from random import seed,randrange
  import joblib
  #from sklearn.externals import joblib

  read_file = pd.read_csv ('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.data', header = None,delimiter=" ")
  read_file.columns = ['first_column','second_column','third_column','fourth_column','fifth_column','sixth_column','sev_column','eighth_column','target']
  read_file.to_csv ('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv', index=None)

  regdata=pd.read_csv('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv')
  #preprocessing
  gender=np.unique(regdata['first_column'])
  from sklearn.preprocessing import LabelEncoder
  lb_gender=LabelEncoder()
  regdata['first_column']=lb_gender.fit_transform(regdata['first_column'])
  #regdata.info()
  labels=regdata['target']
  input_regdata=regdata.drop(['target'],axis=1)
  #input_regdata.head(10)

  # Split a dataset into k folds
  def kfold_split(dataset,labels,folds):
    dataset_split=list()
    labels_split=list()
    dataset_copy=dataset.values.tolist()
    labels_copy=labels.values.tolist()
    fold_size = int(len(dataset) / folds)
    for i in range(folds):
      fold=list()
      foldlabel=list()
      while len(fold) < fold_size:
        index = randrange(len(dataset_copy))
        #p=np.random.permutation(len(dataset_copy))
        fold.append(dataset_copy.pop(index))
        foldlabel.append(labels_copy.pop(index))
      dataset_split.append(fold)
      labels_split.append(foldlabel)
    return dataset_split,labels_split
  #dataset_copy=regdata.values.tolist()

  def linreg(train_samples, train_labels, test_sample, test_label):
    LR=Regression()
    LR.fit(train_samples,train_labels)
    y_predicted = LR.predict(test_sample)
    y_predicted_train = LR.predict(train_samples)
    return y_predicted, y_predicted_train, LR
    
  def mse(y_true,y_pred):
    sum_error=0
    for i in range(len(y_true)):
      sum_error = sum_error+(y_true[i]-y_pred[i])**2
    mse = sum_error/float(len(y_true))
    return mse

  import joblib
  seed(1)
  folds,labelfolds = kfold_split(input_regdata, labels,5)

  (train_samples1) = np.array(folds[0]+folds[1]+folds[2]+folds[3])
  train_labels1 = np.array(labelfolds[0]+labelfolds[1]+labelfolds[2]+labelfolds[3])
  test_sample1 = np.array(folds[4])
  test_label1 = np.array(labelfolds[4])

  train_samples2 = np.array(folds[0]+folds[1]+folds[2]+folds[4])
  train_labels2 = np.array(labelfolds[0]+labelfolds[1]+labelfolds[2]+labelfolds[4])
  test_sample2 = np.array(folds[3])
  test_label2 = np.array(labelfolds[3])

  train_samples3 = np.array(folds[0]+folds[1]+folds[4]+folds[3])
  train_labels3 = np.array(labelfolds[0]+labelfolds[1]+labelfolds[4]+labelfolds[3])
  test_sample3 = np.array(folds[2])
  test_label3 = np.array(labelfolds[2])

  train_samples4 = np.array(folds[0]+folds[4]+folds[2]+folds[3])
  train_labels4 = np.array(labelfolds[0]+labelfolds[4]+labelfolds[2]+labelfolds[3])
  test_sample4 = np.array(folds[1])
  test_label4 = np.array(labelfolds[1])

  train_samples5 = np.array(folds[4]+folds[1]+folds[2]+folds[3])
  train_labels5 = np.array(labelfolds[4]+labelfolds[1]+labelfolds[2]+labelfolds[3])
  test_sample5 = np.array(folds[0])
  test_label5 = np.array(labelfolds[0])

  # Commented in order to get values from saved models
  # y_predicted1, y_predicted1_train, LR1 = linreg(train_samples1, train_labels1, test_sample1, test_label1)
  # y_predicted2, y_predicted2_train, LR2 = linreg(train_samples2, train_labels2, test_sample2, test_label2)
  # y_predicted3, y_predicted3_train, LR3 = linreg(train_samples3, train_labels3, test_sample3, test_label3)
  # y_predicted4, y_predicted4_train, LR4 = linreg(train_samples4, train_labels4, test_sample4, test_label4)
  # y_predicted5, y_predicted5_train, LR5 = linreg(train_samples5, train_labels5, test_sample5, test_label5)

  # model = [y_predicted1, y_predicted1_train, LR1, y_predicted2, y_predicted2_train, LR2, y_predicted3, y_predicted3_train, LR3, y_predicted4, 
  #          y_predicted4_train, LR4, y_predicted5, y_predicted5_train, LR5]
  # # Save the model as a pickle in a file 
  # joblib.dump(model , '/content/drive/My Drive/Colab Notebooks/MLAssignment2/model1b.sav') 
    
  # Load the model from the file 
  model_from_joblib = joblib.load('/content/drive/My Drive/Colab Notebooks/MLAssignment2/model1b.sav')  
    
  y_predicted1 = model_from_joblib[0]
  y_predicted1_train = model_from_joblib[1]
  y_predicted2 = model_from_joblib[3] 
  y_predicted2_train = model_from_joblib[4]
  y_predicted3 = model_from_joblib[6]
  y_predicted3_train = model_from_joblib[7]
  y_predicted4 = model_from_joblib[9]
  y_predicted4_train = model_from_joblib[10]
  y_predicted5 = model_from_joblib[12]
  y_predicted5_train = model_from_joblib[13]

  mse1=(mse(test_label1,y_predicted1))
  mse2=(mse(test_label2,y_predicted2))
  mse3=(mse(test_label3,y_predicted3))
  mse4=(mse(test_label4,y_predicted4))
  mse5=(mse(test_label5,y_predicted5))
  mse_tstlst = [mse1, mse2, mse3, mse4, mse5]

  mean_mse_test=(mse1+mse2+mse3+mse4+mse5)/5
  #print(mse1, mse2, mse3, mse4, mse5)

  mse1_train=(mse(train_labels1,y_predicted1_train))
  mse2_train=(mse(train_labels2,y_predicted2_train))
  mse3_train=(mse(train_labels3,y_predicted3_train))
  mse4_train=(mse(train_labels4,y_predicted4_train))
  mse5_train=(mse(train_labels5,y_predicted5_train))
  mse_trlst = [mse1_train, mse2_train, mse3_train, mse4_train, mse5_train]
  mean_mse_train=(mse1_train+mse2_train+mse3_train+mse4_train+mse5_train)/5
  #print(mse1_train, mse2_train, mse3_train, mse4_train, mse5_train)

  acc_table1 = pd.DataFrame(columns=['Model Number', 'Train MSE','Test MSE'])
  for i in range(5):

    new_row1 = {'Model Number':i+1, 'Train MSE':mse_trlst[i] ,'Test MSE':mse_tstlst[i]}
    acc_table1 = acc_table1.append(new_row1,ignore_index=True)
  print(acc_table1)
  print("\n")
  print("Mean train MSE : ",mean_mse_train)
  print("Mean test MSE : ", mean_mse_test)


  #with sklearn 
  from sklearn.metrics import mean_squared_error

  mse_skl1=mean_squared_error(test_label1,y_predicted1)
  mse_skl2=(mean_squared_error(test_label2,y_predicted2))
  mse_skl3=(mean_squared_error(test_label3,y_predicted3))
  mse_skl4=(mean_squared_error(test_label4,y_predicted4))
  mse_skl5=(mean_squared_error(test_label5,y_predicted5))
  mse_testlst_skl = [mse_skl1, mse_skl2, mse_skl3, mse_skl4, mse_skl5]
  mean_mse_skl=(mse_skl1+mse_skl2+mse_skl3+mse_skl4+mse_skl5)/5
  #print(mse_skl1, mse_skl2, mse_skl3, mse_skl4, mse_skl5)


  mse_skl1_train=(mean_squared_error(train_labels1,y_predicted1_train))
  mse_skl2_train=(mean_squared_error(train_labels2,y_predicted2_train))
  mse_skl3_train=(mean_squared_error(train_labels3,y_predicted3_train))
  mse_skl4_train=(mean_squared_error(train_labels4,y_predicted4_train))
  mse_skl5_train=(mean_squared_error(train_labels5,y_predicted5_train))
  mse_trainlst_skl = [mse_skl1_train, mse_skl2_train, mse_skl3_train, mse_skl4_train, mse_skl5_train]
  mean_mse_train_skl=(mse_skl1_train+mse_skl2_train+mse_skl3_train+mse_skl4_train+mse_skl5_train)/5
  #print(mse_skl1_train, mse_skl2_train, mse_skl3_train, mse_skl4_train, mse_skl5_train)
  acc_table2 = pd.DataFrame(columns=['Model Number', 'Train MSE SKL','Test MSE SKL'])
  for i in range(5):
    new_row2 = {'Model Number':i+1, 'Train MSE SKL':mse_trainlst_skl[i], 'Test MSE SKL':mse_testlst_skl[i]}
    acc_table2 = acc_table2.append(new_row2, ignore_index=True)
  print(acc_table2)
  # print("\n")
  # print(mean_mse_skl)
  # print(mean_mse_train_skl)
  print("\n")
  print("Mean train MSE SKL : ",mean_mse_train_skl)
  print("Mean test MSE SKL : ", mean_mse_skl)
q2b()

"""**Part c**"""

def q2c():
  import numpy as np
  import pandas as pd
  from random import seed,randrange
  import joblib
  from sklearn.metrics import mean_squared_error

  read_file = pd.read_csv ('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.data', header = None,delimiter=" ")
  read_file.columns = ['first_column','second_column','third_column','fourth_column','fifth_column','sixth_column','sev_column','eighth_column','target']
  read_file.to_csv ('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv', index=None)
  #df = pd.read_csv("{}".format('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.data'),delimiter=" ")
  #df.to_csv("{}".format('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv'))

  regdata=pd.read_csv('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv')

  #preprocessing
  gender=np.unique(regdata['first_column'])
  #print(gender)
  from sklearn.preprocessing import LabelEncoder
  lb_gender=LabelEncoder()
  regdata['first_column']=lb_gender.fit_transform(regdata['first_column'])
  #regdata.info()
  labels=regdata['target']
  input_regdata=regdata.drop(['target'],axis=1)

  x0=np.ones(len(input_regdata))
  input_regdata['intercept']=x0

  # Split a dataset into k folds
  def kfold_split(dataset,labels,folds):
    dataset_split=list()
    labels_split=list()
    dataset_copy=dataset.values.tolist()
    labels_copy=labels.values.tolist()
    fold_size = int(len(dataset) / folds)
    for i in range(folds):
      fold=list()
      foldlabel=list()
      while len(fold) < fold_size:
        index = randrange(len(dataset_copy))
        #p=np.random.permutation(len(dataset_copy))
        fold.append(dataset_copy.pop(index))
        foldlabel.append(labels_copy.pop(index))
      dataset_split.append(fold)
      labels_split.append(foldlabel)
    return dataset_split,labels_split

  seed(1)
  folds_NE,labelfolds_NE = kfold_split(input_regdata, labels,5)

  X1 = np.array(folds_NE[0]+folds_NE[1]+folds_NE[2]+folds_NE[3])
  y1 = np.array(labelfolds_NE[0]+labelfolds_NE[1]+labelfolds_NE[2]+labelfolds_NE[3])
  X_test1 = np.array(folds_NE[4])
  y_test1 = np.array(labelfolds_NE[4])

  X2 = np.array(folds_NE[0]+folds_NE[1]+folds_NE[2]+folds_NE[4])
  y2 = np.array(labelfolds_NE[0]+labelfolds_NE[1]+labelfolds_NE[2]+labelfolds_NE[4])
  X_test2 = np.array(folds_NE[3])
  y_test2 = np.array(labelfolds_NE[3])

  X3 = np.array(folds_NE[0]+folds_NE[1]+folds_NE[4]+folds_NE[3])
  y3 = np.array(labelfolds_NE[0]+labelfolds_NE[1]+labelfolds_NE[4]+labelfolds_NE[3])
  X_test3 = np.array(folds_NE[2])
  y_test3 = np.array(labelfolds_NE[2])

  X4 = np.array(folds_NE[0]+folds_NE[4]+folds_NE[2]+folds_NE[3])
  y4 = np.array(labelfolds_NE[0]+labelfolds_NE[4]+labelfolds_NE[2]+labelfolds_NE[3])
  X_test4 = np.array(folds_NE[1])
  y_test4 = np.array(labelfolds_NE[1])

  X5 = np.array(folds_NE[4]+folds_NE[1]+folds_NE[2]+folds_NE[3])
  y5 = np.array(labelfolds_NE[4]+labelfolds_NE[1]+labelfolds_NE[2]+labelfolds_NE[3])
  X_test5 = np.array(folds_NE[0])
  y_test5 = np.array(labelfolds_NE[0])

  #commented to check values from saved model
  # theta1 = np.linalg.inv(X1.T.dot(X1)).dot(X1.T).dot(y1) # normal equation
  # y_p1 = X_test1.dot(theta1)  # making predictions
  # y_tr_p1 = X1.dot(theta1) 

  # theta2 = np.linalg.inv(X2.T.dot(X2)).dot(X2.T).dot(y2) # normal equation
  # y_p2 = X_test2.dot(theta2)  # making predictions
  # y_tr_p2 = X2.dot(theta2)

  # theta3 = np.linalg.inv(X3.T.dot(X3)).dot(X3.T).dot(y3) # normal equation
  # y_p3 = X_test3.dot(theta3)  # making predictions
  # y_tr_p3 = X3.dot(theta3)

  # theta4 = np.linalg.inv(X4.T.dot(X4)).dot(X4.T).dot(y4) # normal equation
  # y_p4 = X_test4.dot(theta4)  # making predictions
  # y_tr_p4 = X4.dot(theta4)

  # theta5 = np.linalg.inv(X5.T.dot(X5)).dot(X5.T).dot(y5) # normal equation
  # y_p5 = X_test5.dot(theta5)  # making predictions
  # y_tr_p5 = X5.dot(theta5)

  # model2 = [y_p1, y_tr_p1, theta1, y_p2, y_tr_p2, theta2, y_p3, y_tr_p3, theta3, y_p4, 
  #           y_tr_p4, theta4, y_p5, y_tr_p5, theta5]
  # # Save the model as a pickle in a file 
  # joblib.dump(model2 , '/content/drive/My Drive/Colab Notebooks/MLAssignment2/model1c.sav') 
    
  # Load the model from the file 
  model_from_joblib2 = joblib.load('/content/drive/My Drive/Colab Notebooks/MLAssignment2/model1c.sav')  
    
  y_p1 = model_from_joblib2[0]
  y_tr_p1 = model_from_joblib2[1]
  y_p2 = model_from_joblib2[3] 
  y_tr_p2 = model_from_joblib2[4]
  y_p3 = model_from_joblib2[6]
  y_tr_p3 = model_from_joblib2[7]
  y_p4 = model_from_joblib2[9]
  y_tr_p4 = model_from_joblib2[10]
  y_p5 = model_from_joblib2[12]
  y_tr_p5 = model_from_joblib2[13]


  mse1_NE = (mean_squared_error(y_test1, y_p1))
  mse1_tr_NE = mean_squared_error(y1, y_tr_p1)

  mse2_NE = (mean_squared_error(y_test2,y_p2))
  mse2_tr_NE = mean_squared_error(y2, y_tr_p2)

  mse3_NE = (mean_squared_error(y_test3,y_p3))
  mse3_tr_NE = mean_squared_error(y3, y_tr_p3)

  mse4_NE = (mean_squared_error(y_test4,y_p4))
  mse4_tr_NE = mean_squared_error(y4, y_tr_p4)

  mse5_NE = (mean_squared_error(y_test5,y_p5))
  mse5_tr_NE = mean_squared_error(y5, y_tr_p5)

  mse_test_NE = [mse1_NE, mse2_NE, mse3_NE, mse4_NE, mse5_NE]
  mse_tr_NE = [mse1_tr_NE, mse2_tr_NE, mse3_tr_NE, mse4_tr_NE, mse5_tr_NE]

  acc_table3 = pd.DataFrame(columns=['Model Number', 'Train MSE NE','Test MSE NE'])
  for i in range(5):
    new_row3 = {'Model Number':i+1, 'Train MSE NE':mse_tr_NE[i], 'Test MSE NE':mse_test_NE[i]}
    acc_table3 = acc_table3.append(new_row3, ignore_index=True)
  print(acc_table3)

  mean_mse_NE = (mse1_NE+mse2_NE+mse3_NE+mse4_NE+mse5_NE)/5
  mean_tr_mse_NE = (mse1_tr_NE + mse2_tr_NE + mse3_tr_NE + mse4_tr_NE + mse5_tr_NE)/5
  #print(mse1_NE, mse2_NE, mse3_NE, mse4_NE, mse5_NE)
  print("Training MSE : ", mean_tr_mse_NE)
  print("Test MSE : ", mean_mse_NE)
q2c()

"""**Part d**"""

def q2d():

  import numpy as np
  from sklearn.linear_model import LinearRegression
  from sklearn.metrics import mean_squared_error
  from random import seed,randrange
  import joblib
  from sklearn.metrics import mean_squared_error
  import pandas as pd

  read_file = pd.read_csv ('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.data', header = None,delimiter=" ")
  read_file.columns = ['first_column','second_column','third_column','fourth_column','fifth_column','sixth_column','sev_column','eighth_column','target']
  read_file.to_csv ('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv', index=None)
  #df = pd.read_csv("{}".format('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.data'),delimiter=" ")
  #df.to_csv("{}".format('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv'))

  regdata=pd.read_csv('/content/drive/My Drive/Colab Notebooks/MLAssignment2/Dataset.csv')

  #preprocessing
  gender=np.unique(regdata['first_column'])
  #print(gender)
  from sklearn.preprocessing import LabelEncoder
  lb_gender=LabelEncoder()
  regdata['first_column']=lb_gender.fit_transform(regdata['first_column'])
  #regdata.info()
  labels=regdata['target']
  input_regdata=regdata.drop(['target'],axis=1)

  x0=np.ones(len(input_regdata))
  input_regdata['intercept']=x0

  # Split a dataset into k folds
  def kfold_split(dataset,labels,folds):
    dataset_split=list()
    labels_split=list()
    dataset_copy=dataset.values.tolist()
    labels_copy=labels.values.tolist()
    fold_size = int(len(dataset) / folds)
    for i in range(folds):
      fold=list()
      foldlabel=list()
      while len(fold) < fold_size:
        index = randrange(len(dataset_copy))
        #p=np.random.permutation(len(dataset_copy))
        fold.append(dataset_copy.pop(index))
        foldlabel.append(labels_copy.pop(index))
      dataset_split.append(fold)
      labels_split.append(foldlabel)
    return dataset_split,labels_split

  import joblib
  seed(1)
  folds,labelfolds = kfold_split(input_regdata, labels,5)

  (train_samples1) = np.array(folds[0]+folds[1]+folds[2]+folds[3])
  train_labels1 = np.array(labelfolds[0]+labelfolds[1]+labelfolds[2]+labelfolds[3])
  test_sample1 = np.array(folds[4])
  test_label1 = np.array(labelfolds[4])

  train_samples2 = np.array(folds[0]+folds[1]+folds[2]+folds[4])
  train_labels2 = np.array(labelfolds[0]+labelfolds[1]+labelfolds[2]+labelfolds[4])
  test_sample2 = np.array(folds[3])
  test_label2 = np.array(labelfolds[3])

  train_samples3 = np.array(folds[0]+folds[1]+folds[4]+folds[3])
  train_labels3 = np.array(labelfolds[0]+labelfolds[1]+labelfolds[4]+labelfolds[3])
  test_sample3 = np.array(folds[2])
  test_label3 = np.array(labelfolds[2])

  train_samples4 = np.array(folds[0]+folds[4]+folds[2]+folds[3])
  train_labels4 = np.array(labelfolds[0]+labelfolds[4]+labelfolds[2]+labelfolds[3])
  test_sample4 = np.array(folds[1])
  test_label4 = np.array(labelfolds[1])

  train_samples5 = np.array(folds[4]+folds[1]+folds[2]+folds[3])
  train_labels5 = np.array(labelfolds[4]+labelfolds[1]+labelfolds[2]+labelfolds[3])
  test_sample5 = np.array(folds[0])
  test_label5 = np.array(labelfolds[0])

  #commented to check the saved model

  # reg1 = LinearRegression().fit(train_samples1,train_labels1)
  # skl_yp1 = reg1.predict(test_sample1)
  # skl_yp_tr1 = reg1.predict(train_samples1)
  # coef1_skl=(reg1.coef_)
  # intercept1_skl=(reg1.intercept_)

  # reg2 = LinearRegression().fit(train_samples2,train_labels2)
  # skl_yp2=reg2.predict(test_sample2)
  # skl_yp_tr2 = reg2.predict(train_samples2)
  # coef2_skl=(reg2.coef_)
  # intercept2_skl=(reg2.intercept_)

  # reg3 = LinearRegression().fit(train_samples3,train_labels3)
  # skl_yp3 = reg3.predict(test_sample3)
  # skl_yp_tr3 = reg3.predict(train_samples3)
  # coef3_skl=(reg3.coef_)
  # intercept3_skl=(reg3.intercept_)

  # reg4 = LinearRegression().fit(train_samples4,train_labels4)
  # skl_yp4 = reg4.predict(test_sample4)
  # skl_yp_tr4 = reg4.predict(train_samples4)
  # coef4_skl=(reg4.coef_)
  # intercept4_skl=(reg4.intercept_)

  # reg5 = LinearRegression().fit(train_samples5,train_labels5)
  # skl_yp5 = reg5.predict(test_sample5)
  # skl_yp_tr5 = reg5.predict(train_samples5)
  # coef5_skl=(reg5.coef_)
  # intercept5_skl=(reg5.intercept_)


  # model3 = [skl_yp1, skl_yp_tr1, reg1, skl_yp2, skl_yp_tr2, reg2, skl_yp3, skl_yp_tr3, reg3, skl_yp4, 
  #            skl_yp_tr4, reg4, skl_yp5, skl_yp_tr5, reg5]
  # # Save the model as a pickle in a file 
  # joblib.dump(model3 , '/content/drive/My Drive/Colab Notebooks/MLAssignment2/model1d.sav') 
    
  # Load the model from the file 
  model_from_joblib3 = joblib.load('/content/drive/My Drive/Colab Notebooks/MLAssignment2/model1d.sav')  
    
  skl_yp1 = model_from_joblib3[0]
  skl_yp_tr1 = model_from_joblib3[1]
  skl_yp2 = model_from_joblib3[3] 
  skl_yp_tr2 = model_from_joblib3[4]
  skl_yp3 = model_from_joblib3[6]
  skl_yp_tr3 = model_from_joblib3[7]
  skl_yp4 = model_from_joblib3[9]
  skl_yp_tr4 = model_from_joblib3[10]
  skl_yp5 = model_from_joblib3[12]
  skl_yp_tr5 = model_from_joblib3[13]


  mse1_skl=(mean_squared_error(test_label1,skl_yp1))
  mse1_tr_skl = mean_squared_error(train_labels1,skl_yp_tr1)

  mse2_skl=(mean_squared_error(test_label2,skl_yp2))
  mse2_tr_skl = mean_squared_error(train_labels2, skl_yp_tr2)

  mse3_skl=(mean_squared_error(test_label3,skl_yp3))
  mse3_tr_skl = mean_squared_error(train_labels3, skl_yp_tr3)

  mse4_skl=(mean_squared_error(test_label4,skl_yp4))
  mse4_tr_skl = mean_squared_error(train_labels4, skl_yp_tr4)

  mse5_skl=(mean_squared_error(test_label5,skl_yp5))
  mse5_tr_skl = mean_squared_error(train_labels5,skl_yp_tr5)


  mse1d_trlst = [mse1_tr_skl, mse2_tr_skl, mse3_tr_skl, mse4_tr_skl, mse5_tr_skl]
  mse1d_telst = [ mse1_skl , mse2_skl , mse3_skl , mse4_skl , mse5_skl]

  mse1d_mean_skl=(mse1_skl + mse2_skl + mse3_skl + mse4_skl + mse5_skl)/5
  mse1d_mean_skl_tr = (mse1_tr_skl + mse2_tr_skl + mse3_tr_skl + mse4_tr_skl + mse5_tr_skl)/5

  acc_table4 = pd.DataFrame(columns=['Model Number', 'Train MSE SKL','Test MSE SKL'])
  for i in range(5):
    new_row4 = {'Model Number':i+1, 'Train MSE SKL':mse1d_trlst[i], 'Test MSE SKL':mse1d_telst[i]}
    acc_table4 = acc_table4.append(new_row4, ignore_index=True)
  print(acc_table4)

  #print(mse1_skl , mse2_skl , mse3_skl , mse4_skl , mse5_skl)
  print("Mean mse skl train : ", mse1d_mean_skl_tr)
  print("Mean mse skl test : ", mse1d_mean_skl)
q2d()

if __name__ == "__main__":
  q2b()
  q2c()
  q2d()